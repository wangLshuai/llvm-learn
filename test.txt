extern foo(a b);
def foo(b c) b+4*b*b+2*b+3;
def f(a) a*2*a+a+2*a;
2+4;
def f2(x) (x+2)*(x+(1+1));
2+3;
f2(5);
def f3(n) if n<3.0 then f(n) else f2(n);
f3(2);
extern putchard(x);
putchard(120);
extern printd(x);
printd(3.0);
def printstar(n)
    for i = 0,i<n, 1.0 in
        putchard(42);  #asii 42 == '*'

printstar(2);

def binary : 1 (x y) y;

printd(123):printd(456):printd(789);

def unary!(v)
if v then
    0
else
    1;

def unary-(v)
    0-v;
def binary> 10 (LHS RHS)
    RHS < LHS

def binary| 5(LHS RHS)
    if LHS then
        1
    else if RHS then
        1
    else
        0;
def binary & 6 (LHS RHS)
    if !LHS then
        0
    else
        !!RHS;
!3;
-5;
5>3;
0|1;
0&1;

def printdensity(d)
    if d > 8 then
        putchard(32) # ' '
    else if d > 4 then
        putchard(46) # '.'
    else if d > 2 then
        putchard(43) # '+'
    else
        putchard(42); #'*'

printdensity(1):printdensity(2):printdensity(3):
printdensity(4):printdensity(5):printdensity(9):
printdensity(10)

printstar(100);
# Determine whether the specific location diverges.
# Solve for z = z^2 + c in the complex plane.

def mandelconverger(real imag iters creal cimag)
    if iters > 255 | (real*real + imag*imag > 4) then
        iters
    else
        mandelconverger(real*real - imag*imag + creal,2*real*imag+cimag,iters+1,creal,cimag);

def mandelconverge(real imag)
    mandelconverger(real,imag,0,real,imag);

def loop(xmin xmax xstep y)
    for x = xmin,x<xmax, xstep in
        printdensity(mandelconverge(x,y));

# Compute and plot the mandelbrot set with the specified 2 dimensional range
# info.
def mandelhelp(xmin xmax xstep   ymin ymax ystep)
  for y = ymin, y < ymax, ystep in (
    (for x = xmin, x < xmax, xstep in
       printdensity(mandelconverge(x,y)))
    : putchard(10)
  )


# mandel - This is a convenient helper function for plotting the mandelbrot set
# from the specified position with the specified Magnification.
def mandel(realstart imagstart realmag imagmag)
  mandelhelp(realstart, realstart+realmag*78, realmag,
             imagstart, imagstart+imagmag*40, imagmag);

mandel(-2.3, -1.3, 0.05, 0.07);

 mandel(-2, -1, 0.02, 0.04);

 mandel(-0.9, -1.4, 0.02, 0.03);



# Recursive fib, we could do this before.
def fib(x)
    if (x < 3) then
        1
    else
        fib(x-1) + fib(x-2);

fib(10);

printstar(100);

# Iterative fib.
def fibi(x)
    var a = 1,b=1,c in
    (for i = 3,i<x in
     c = a+b:
     a = b:
     b = c) : b;

fibi(11);
